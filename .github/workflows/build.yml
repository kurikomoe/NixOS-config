name: "build system"

on:
    workflow_dispatch:
    # push:
    #   paths-ignore:
    #     - "flake.*"

permissions:
    actions: write
    contents: write
    statuses: read

jobs:
    build-system:
        runs-on: ubuntu-latest
        env:
            # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            timestamp: "N/A"
        steps:
            - name: Maximize build space
              uses: easimon/maximize-build-space@master
              with:
                root-reserve-mb: 16384
                swap-size-mb: 4096
                build-mount-path: '/nix'
                remove-dotnet: 'true'
                remove-android: 'true'
                remove-haskell: 'true'
                remove-codeql: 'true'
                remove-docker-images: 'true'

            - uses: szenius/set-timezone@v2.0
              with:
                timezoneLinux: "Asia/Shanghai"

            - uses: actions/checkout@v4
              # with:
              #   token: ${{ secrets.GITHUB_TOKEN }}

            - name: Install Nix
              uses: cachix/install-nix-action@v31
              with:
                github_access_token: ${{ secrets.GITHUB_TOKEN }}
                enable_kvm: true
                set_as_trusted_user: true
                extra_nix_config: |
                  system-features = nixos-test benchmark big-parallel kvm benchmark big-parallel kvm nixos-test gccarch-x86-64-v3


            # - uses: nixbuild/nix-quick-install-action@v32
            # - name: Restore and save Nix store
            #   uses: nix-community/cache-nix-action@v6
            #   with:
            #     primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
            #     restore-prefixes-first-match: nix-${{ runner.os }}-
            #     gc-max-store-size-linux: 5G
            #     purge: true
            #     purge-prefixes: nix-${{ runner.os }}-
            #     purge-created: 0
            #     purge-last-accessed: 0
            #     purge-primary-key: never

            - name: Setup cachix
              uses: cachix/cachix-action@v16
              with:
                name: kurikomoe
                authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

            # - name: Restore and save Nix store
            #   uses: nix-community/cache-nix-action@v6
            #   with:
            #         # restore and save a cache using this key
            #         primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
            #         # if there's no cache hit, restore a cache by this prefix
            #         restore-prefixes-first-match: nix-${{ runner.os }}-
            #         # collect garbage until the Nix store size (in bytes) is at most this number
            #         # before trying to save a new cache
            #         # 1G = 1073741824
            #         gc-max-store-size-linux: 2G
            #         # do purge caches
            #         purge: true
            #         # purge all versions of the cache
            #         purge-prefixes: nix-${{ runner.os }}-
            #         # created more than this number of seconds ago
            #         purge-created: 0
            #         # or, last accessed more than this number of seconds ago
            #         # relative to the start of the `Post Restore and save Nix store` phase
            #         purge-last-accessed: 0
            #         # except any version with the key that is the same as the `primary-key`
            #         purge-primary-key: never

            # - run: nix profile install nixpkgs#nixStatic

            - name: update flake
              id: update-flake
              run: |
                # We treat KurikoG14 as the standard
                TARGET="KurikoG14"
                set -ex

                nix_build_once() {
                  # $1: flake attr path
                  nix build "$1" --no-link --print-out-paths
                }

                nix_build_with_retry() {
                  # $1: flake attr path
                  local attr="$1"
                  local out
                  if out=$(nix_build_once "$attr"); then
                    echo "$out"
                    return 0
                  fi
                  echo "nix build failed for $attr, retrying once in 5s..." >&2
                  sleep 5
                  if out=$(nix_build_once "$attr"); then
                    echo "$out"
                    return 0
                  fi
                  echo "nix build failed twice for $attr" >&2
                  return 1
                }

                ATTR=".#nixosConfigurations.${TARGET}.config.system.build.toplevel"

                echo "### 1. Getting current system path..."
                # 使用 nix build 来确保路径是可用的
                nix_build_with_retry "$ATTR"

            - name: Setup upterm session
              uses: lhotari/action-upterm@v1
              if: ${{ failure() }}
              with:
                wait-timeout-minutes: 5
